<?php

namespace App\Http\Requests\Auth;

use Illuminate\Auth\Events\Lockout;
use Illuminate\Foundation\Http\FormRequest;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\RateLimiter;
use Illuminate\Support\Str;
use Illuminate\Validation\ValidationException;

class LoginRequest extends FormRequest
{
    //ADD 
    protected $loginField;
    protected $loginValue;

    public function authorize()
    {
        return true;
    }
    //ADD
    protected function prepareForValidation()
    {
        $this->loginField = filter_var($this->input('login'),
        FILTER_VALIDATE_EMAIL) ? 'email' : 'phone_no';
        $this->loginValue = $this->input('login');
        $this->merge([$this->loginField => $this->loginValue]);
    }
    
    public function rules()
    {
        //ADD
        return [
            'email' => 'required_without:phone_no|string|email|exists:users,email',
            'phone_no' => 'required_without:email|string|exists:users,phone_no',
            'password' => 'required|string',
        ];
    }

    /**
     * Attempt to authenticate the request's credentials.
     *
     * @return void
     *
     * @throws \Illuminate\Validation\ValidationException
     */
    public function authenticate()
    {
        $this->ensureIsNotRateLimited();
        if (!Auth::attempt(
              $this->only($this->loginField, 'password'), 
              $this->boolean('remember')
           )) 
        {
          RateLimiter::hit($this->throttleKey());
          throw ValidationException::withMessages([
            'login' => __('auth.failed')
          ]);
        }
        RateLimiter::clear($this->throttleKey());
      
    }

    /**
     * Ensure the login request is not rate limited.
     *
     * @return void
     *
     * @throws \Illuminate\Validation\ValidationException
     */
    public function ensureIsNotRateLimited()
    {
        if (! RateLimiter::tooManyAttempts($this->throttleKey(), 5)) {
            return;
        }

        event(new Lockout($this));

        $seconds = RateLimiter::availableIn($this->throttleKey());

        throw ValidationException::withMessages([
            'phone_no' => trans('auth.throttle', [
                'seconds' => $seconds,
                'minutes' => ceil($seconds / 60),
            ]),
        ]);
    }

    /**
     * Get the rate limiting throttle key for the request.
     *
     * @return string
     */
    public function throttleKey()
    {
        return Str::lower($this->input('phone_no')).'|'.$this->ip();
    }
}
